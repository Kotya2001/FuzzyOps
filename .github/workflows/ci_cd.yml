name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  PYPI_REPOSITORY: "pypi"
  PACKAGE_NAME: "fuzzyops"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m unittest \
          src.fuzzyops.tests.test_fuzz_defuzz.TestFuzzyNumber \
          src.fuzzyops.tests.test_dominating.TestDominating \
          src.fuzzyops.tests.test_factoring.TestFactoring \
          src.fuzzyops.tests.test_fan.TestFAN \
          src.fuzzyops.tests.test_fuzzy_logic.TestFuzzyInference \
          src.fuzzyops.tests.test_prediction.TestFuzzyLR \
          src.fuzzyops.tests.test_sasolver.TestSASolver \
          src.fuzzyops.tests.test_transport.TestTransport
  
  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.10"
  #   - name: Build documentation
  #     run: |
  #       cd src/docs
  #       make html

  release:
    # needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel bump2version twine
    
    - name: Validate setup.cfg version
      id: version-check
      run: |
        # Берем версию только из секции [metadata]
        VERSION=$(awk '/^\[metadata\]/{f=1;next} /^\[/{f=0} f && /^version =/{print $3;exit}' setup.cfg | tr -d '[:space:]')
        
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version format: '$VERSION'. Must be X.Y.Z"
          exit 1
        fi
        
        echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Valid version": $VERSION
    
    - name: Bump version
      run: |
        # Увеличиваем PATCH версию
        IFS='.' read -ra PARTS <<< "${{ env.CURRENT_VERSION }}"
        NEW_VERSION="${PARTS[0]}.${PARTS[1]}.$((${PARTS[2]} + 1))"
        
        # Обновляем версию в секции [metadata]
        sed -i '/^\[metadata\]/,/^\[/ s/^version = .*/version = '"$NEW_VERSION"'/' setup.cfg
        
        # Обновляем версию в секции [project]
        sed -i '/^\[project\]/,/^\[/ s/^version = .*/version = '"$NEW_VERSION"'/' setup.cfg
        
        # Проверяем обновление
        UPDATED_METADATA=$(awk '/^\[metadata\]/{f=1;next} /^\[/{f=0} f && /^version =/{print $3}' setup.cfg | tr -d '[:space:]')
        UPDATED_PROJECT=$(awk '/^\[project\]/{f=1;next} /^\[/{f=0} f && /^version =/{print $3}' setup.cfg | tr -d '[:space:]')
        
        if [ "$UPDATED_METADATA" != "$NEW_VERSION" ] || [ "$UPDATED_PROJECT" != "$NEW_VERSION" ]; then
          echo "::error::Failed to update versions correctly"
          echo "Metadata version: $UPDATED_METADATA"
          echo "Project version: $UPDATED_PROJECT"
          exit 1
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Bumped version to": $NEW_VERSION
    
    
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
    
    # Ключевой этап загрузки на PyPI через twine
    - name: Upload to PyPI with twine
      run: |
        twine check dist/*
        twine upload --verbose --repository ${{ env.PYPI_REPOSITORY }} \
          --username __token__ \
          --password ${{ secrets.PYPI_API_TOKEN }} \
          dist/*
    
    - name: Create release commit and tag
      run: |
        pip install sphinx sphinx_rtd_theme
        cd src/docs
        make html
        cd ..
        cd ..
        git config --global user.name "Kotya2001"
        git config --global user.email "venom228305@gmail.com"
        git add setup.cfg
        git add src/docs/*
        git commit -m "Release v${{ env.NEW_VERSION }} [skip ci]"
        git tag -a "v${{ env.NEW_VERSION }}" -m "Version ${{ env.NEW_VERSION }}"
        git push origin main --tags
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: v${{ env.NEW_VERSION }}
        tag_name: v${{ env.NEW_VERSION }}
        body: |
          Автоматический релиз версии ${{ env.NEW_VERSION }}
          
          Изменения:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false